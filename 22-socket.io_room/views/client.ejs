<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Room Chat</title>
    <script src="/socket.io/socket.io.js"></script>

    <style>
        #body {
            width: 100%;
            height: 70vh;
            position: relative;
            background-color: aquamarine;
        }

        #chat {
            position: absolute;
            bottom: 0px;
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        #notice {
            display: flex;
            flex-direction: column;
            text-align: center;
            color: gray;
        }

        #notice p {
            margin: 0;
        }

        .my-chat {
            display: flex;
            justify-content: end;
            padding: 2px 0px;
        }

        .my-chat p {
            margin: 0;
            padding: 10px;
            background-color: yellow;
            border-radius: 10px;
            margin-right: 10px;
        }

        .other-chat {
            display: flex;
            justify-content: start;
            padding: 2px 0px;
        }

        .other-chat p {
            margin: 0px;
            padding: 10px;
            background-color: white;
            border-radius: 10px;
            margin-left: 10px;
        }

        .secret-chat p {
            background-color: pink;
        }
    </style>
</head>
<body>
    <h1>채팅방</h1>
    <!-- 채팅방 설정 -->
     <div id="main">
        <form id="room">
            <input type="text" id="roomName" placeholder="채팅방 만들기">
            <input type="text" id="userName" placeholder="사용자 이름 입력">
            <button>생성</button>
        </form>
        <!-- [5] 채팅방 목록 리스트 -->
         <h3>채팅방 목록</h3>
         <ul id="lists"></ul>
     </div>

     <!-- 채팅창 화면 -->
      <div id="body" hidden>
        <div id="message">
            <div id="notice"></div>
        </div>
        <!-- 채팅 입력 구간 -->
         <form id="chat">
            <select id="userList"></select>
            <input type="text" id="chatMessage" placeholder="메시지 입력">
            <button>입력</button>
         </form>
      </div>

      <script>
        // [1] 변수 정의
        const socket = io();

        const roomForm = document.querySelector('#room');
        const chatForm = document.querySelector('#chat');
        const notice = document.querySelector('#notice');
        const message = document.querySelector('#message');
        let myName = ''; // 내 닉네임 (빈 값)정의

        // -----------------------
        // 폼 이벤트 (서버에게 요청)
        // -----------------------

        // [2] 채팅방 생성!
        roomForm.addEventListener('submit', (e) => {
            console.log(e);
            e.preventDefault(); // 폼 제출 시 페이지 새로고침 방지.
            const roomName = roomForm.querySelector('#roomName').value; // 채팅방 제목
            const userName = roomForm.querySelector('#userName').value; // 유저 이름

            if (roomName === '' || userName === '') {
                alert('방 제목과 닉네임을 입력하세요.');
                return;
            }

            socket.emit('create', {roomName, userName});
            const main = document.querySelector('#main');
            const body = document.querySelector('#body');
            main.hidden = true;
            body.hidden = false;

            // 전역변수에 입력한 닉네임 저장.
            myName = userName;
        })

        // [6] 메세지 전송
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const chatMessage = chatForm.querySelector('#chatMessage');
            const user = chatForm.querySelector('#userList');
            socket.emit('sendMessage', { message: chatMessage.value, user: myName, select: user.value})
            chatMessage.value = '';
        })

        // ------------------------
        // 소켓 이벤트
        // ------------------------

        // [3] 공지 알림 (본인 제외)
        socket.on('notice', (res) => {
            const div = document.createElement('div');
            const p = document.createElement('p');
            console.log('notice >>> ', res);
            p.textContent = res;
            div.appendChild(p);
            notice.appendChild(div);
        })

        // [4] 유저 리스트 갱신
        socket.on('userList', (res) => {
            console.log("클라이언트 측의 userList :: ", res);
            const lists = document.querySelector('#userList');
            let options = `<option value='all'>전체</option>`;
            for (let i of res) {
                options += `<option value='${i.key}'>${i.userName}</option>`
            }
            lists.innerHTML = options;
        })

        // [5] 개설된 채팅방 리스트
        socket.on('connect', () => {
            socket.on('roomList', (res) => {
                console.log("res >>>", res);
                const lists = document.querySelector('#lists');
                lists.innerHTML = ''; // 리스트 초기화

                res.forEach((room) => {
                    const li = document.createElement('li');
                    li.textContent = `${room}`;
                    lists.appendChild(li);
                })
            })
        });

        // [6] 메세지
        socket.on('newMessage', (res) => {
            console.log("newMessage >>>> ", res);
            // {message: '안녕', user: '리자몽', dm: false}
            // {message: '야', user: '리자몽', dm: true}

            const div = document.createElement('div');
            const p = document.createElement('p');

            if (myName === res.user) {
                // 내가 입력한 텍스트
                div.classList.add('my-chat');
            } else {
                // 상대방이 입력한 텍스트
                div.classList.add('other-chat');
            }
            // 개인 메시지 일 때

            if(res.dm) {
                div.classList.add('secret-chat');
            }

            p.textContent = `${res.user} : ${res.message}`
            div.appendChild(p);
            message.appendChild(div);
        })
      </script>
</body>
</html>